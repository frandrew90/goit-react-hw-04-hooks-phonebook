{"version":3,"sources":["Components/contatctForm/ContactForm.module.css","Components/contactList/ContactList.module.css","Components/filter/Filter.module.css","Components/App.module.css","Components/contactList/ContactList.js","Components/contatctForm/ContactForm.js","Components/filter/Filter.js","Components/App.js","index.js"],"names":["module","exports","ContactList","findContact","removeContact","map","contact","className","s","contactListItem","contactListName","name","contactListNumber","number","contactListItemBtn","type","id","onClick","initialState","ContactForm","isThereContact","addNewContact","useState","state","setState","handleChange","e","target","value","prevState","contactForm","onSubmit","preventDefault","alert","contactFormName","contactFormNameInput","onChange","pattern","title","required","contactFormNumber","contactFormNumInput","contactFormBtn","Filter","filter","filterInput","contacts","App","console","log","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","newContact","uuidv4","some","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,gBAAkB,qCAAqC,qBAAuB,0CAA0C,kBAAoB,uCAAuC,oBAAsB,yCAAyC,eAAiB,sC,kBCApUD,EAAOC,QAAU,CAAC,gBAAkB,qCAAqC,gBAAkB,qCAAqC,kBAAoB,uCAAuC,mBAAqB,0C,mBCAhND,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,8B,gBCAhED,EAAOC,QAAU,CAAC,MAAQ,qB,qJC2BXC,EAxBK,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cAClC,OACE,6BACGD,EAAYE,KAAI,SAAAC,GACf,OACE,qBAAIC,UAAWC,IAAEC,gBAAjB,UACE,uBAAMF,UAAWC,IAAEE,gBAAnB,UAAqCJ,EAAQK,KAA7C,OADF,OAGE,sBAAMJ,UAAWC,IAAEI,kBAAnB,SAAuCN,EAAQO,SAC/C,wBACEN,UAAWC,IAAEM,mBACbC,KAAK,SACLC,GAAIV,EAAQU,GACZC,QAASb,EAJX,sBAJqCE,EAAQU,U,gBCLnDE,EAAe,CACnBP,KAAM,GACNE,OAAQ,IAgEKM,EA7DK,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,cACrC,EAA0BC,mBAASJ,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KASMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MACdJ,GAAS,SAAAK,GAAS,kCAAUA,GAAV,kBAAsBlB,EAAOiB,QAYjD,OACE,uBAAMrB,UAAWC,IAAEsB,YAAaC,SAVb,SAAAL,GAEnB,GADAA,EAAEM,iBACEZ,EAAeG,EAAMZ,MACvB,OAAOsB,MAAM,GAAD,OAAIV,EAAMZ,KAAV,sCAEdU,EAAcE,GAhBdC,EAAS,CACPb,KAAM,GACNE,OAAQ,MAmBV,UACE,wBAAON,UAAWC,IAAE0B,gBAApB,kBAEE,uBACE3B,UAAWC,IAAE2B,qBACbC,SAAUX,EACVV,KAAK,OACLJ,KAAK,OACLiB,MAAOL,EAAMZ,KACb0B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,wBAAOhC,UAAWC,IAAEgC,kBAApB,oBAEE,uBACEjC,UAAWC,IAAEiC,oBACbL,SAAUX,EACVV,KAAK,MACLJ,KAAK,SACLiB,MAAOL,EAAMV,OACbwB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAIZ,wBAAQhC,UAAWC,IAAEkC,eAAgB3B,KAAK,SAA1C,6B,iBC5CS4B,EAfA,SAAC,GAA0B,IAAxBP,EAAuB,EAAvBA,SAAUQ,EAAa,EAAbA,OAC1B,OACE,wBAAOrC,UAAWC,IAAEoC,OAApB,mCAEE,uBACErC,UAAWC,IAAEqC,YACblC,KAAK,SACLI,KAAK,OACLa,MAAOgB,EACPR,SAAUA,Q,iBCNZlB,EAAe,CACnB4B,SAAU,GAEVF,OAAQ,IAoFKG,EAjFH,WACV,MAA0BzB,mBAASJ,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAGAwB,QAAQC,IAAI,IAAK1B,GACjB2B,qBAAU,WACR,IAAMJ,EAAWK,KAAKC,MAAMC,aAAaC,QAAQ,aAC7CR,GACFtB,GAAS,SAAAK,GAAS,kCAAUA,GAAV,IAAqBiB,kBAGxC,IACHE,QAAQC,IAAI1B,GAQZ2B,qBAAU,WACRG,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUjC,EAAMuB,aACrD,CAACvB,EAAMuB,WAwCV,OACE,qCACE,oBAAIvC,UAAWC,IAAE8B,MAAjB,uBAEA,cAAC,EAAD,CAEEjB,cAtCgB,SAAAoC,GACpBjC,GAAS,SAAAK,GAAS,kCACbA,GADa,IAEhBiB,SAAS,GAAD,mBAAMjB,EAAUiB,UAAhB,4BAA+BW,GAA/B,IAA2CzC,GAAI0C,wBAoCrDtC,eAZiB,SAAAT,GAAI,OACzBY,EAAMuB,SAASa,MACb,SAAArD,GAAO,OAAIA,EAAQK,KAAKiD,gBAAkBjD,EAAKiD,oBAa/C,oBAAIrD,UAAWC,IAAE8B,MAAjB,sBAEA,cAAC,EAAD,CAAQM,OAAQrB,EAAMqB,OAAQR,SArCb,SAAAV,GACnB,MAAwBA,EAAEC,OAAlBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MACdJ,GAAS,SAAAK,GAAS,kCAAUA,GAAV,kBAAsBlB,EAAOiB,UAqC7C,cAAC,EAAD,CAAazB,YAxBRoB,EAAMuB,SAASF,QAAO,SAAAtC,GAAO,OAClCA,EAAQK,KAAKiD,cAAcC,SAAStC,EAAMqB,OAAOgB,kBAuBRxD,cAlCvB,SAAAsB,GACpB,IAAMV,EAAKU,EAAEC,OAAOX,GACpBQ,GAAS,SAAAK,GAAS,kCACbA,GADa,IAEhBiB,SAAUjB,EAAUiB,SAASF,QAAO,SAAAtC,GAAO,OAAIA,EAAQU,KAAOA,iB,MCtDpE8C,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e81fc736.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__3mxAl\",\"contactFormName\":\"ContactForm_contactFormName__nAYXo\",\"contactFormNameInput\":\"ContactForm_contactFormNameInput__1gV9g\",\"contactFormNumber\":\"ContactForm_contactFormNumber__Of5D5\",\"contactFormNumInput\":\"ContactForm_contactFormNumInput__2FCsm\",\"contactFormBtn\":\"ContactForm_contactFormBtn__1VSJQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"ContactList_contactListItem__3gIdN\",\"contactListName\":\"ContactList_contactListName__2lDgX\",\"contactListNumber\":\"ContactList_contactListNumber__1ZCiF\",\"contactListItemBtn\":\"ContactList_contactListItemBtn__3UQ3V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3Sn5o\",\"filterInput\":\"Filter_filterInput__2b7JB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__1r1I_\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ findContact, removeContact }) => {\r\n  return (\r\n    <ul>\r\n      {findContact.map(contact => {\r\n        return (\r\n          <li className={s.contactListItem} key={contact.id}>\r\n            <span className={s.contactListName}>{contact.name}:</span>\r\n            &nbsp;\r\n            <span className={s.contactListNumber}>{contact.number}</span>\r\n            <button\r\n              className={s.contactListItemBtn}\r\n              type=\"button\"\r\n              id={contact.id}\r\n              onClick={removeContact}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  findContact: PropTypes.array.isRequired,\r\n  removeContact: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nconst ContactForm = ({ isThereContact, addNewContact }) => {\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const reset = () => {\r\n    setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setState(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (isThereContact(state.name)) {\r\n      return alert(`${state.name} has been already in contact list`);\r\n    }\r\n    addNewContact(state);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form className={s.contactForm} onSubmit={handleSubmit}>\r\n      <label className={s.contactFormName}>\r\n        Name:\r\n        <input\r\n          className={s.contactFormNameInput}\r\n          onChange={handleChange}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={state.name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={s.contactFormNumber}>\r\n        Number:\r\n        <input\r\n          className={s.contactFormNumInput}\r\n          onChange={handleChange}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={state.number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button className={s.contactFormBtn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   reset = () => {\r\n//     setState({\r\n//       name: '',\r\n//       number: '',\r\n//     });\r\n//   };\r\n\r\n//   handleChange = e => {\r\n//     const { name, value } = e.target;\r\n//     setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     if (props.isThereContact(state.name)) {\r\n//       return alert(`${state.name} has been already in contact list`);\r\n//     }\r\n//     props.addNewContact(state);\r\n//     reset();\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className={s.contactForm} onSubmit={handleSubmit}>\r\n//         <label className={s.contactFormName}>\r\n//           Name:\r\n//           <input\r\n//             className={s.contactFormNameInput}\r\n//             onChange={handleChange}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             value={state.name}\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//           />\r\n//         </label>\r\n\r\n//         <label className={s.contactFormNumber}>\r\n//           Number:\r\n//           <input\r\n//             className={s.contactFormNumInput}\r\n//             onChange={handleChange}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             value={state.number}\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//           />\r\n//         </label>\r\n\r\n//         <button className={s.contactFormBtn} type=\"submit\">\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func.isRequired,\r\n  isThereContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ onChange, filter }) => {\r\n  return (\r\n    <label className={s.filter}>\r\n      Find contacts by name:\r\n      <input\r\n        className={s.filterInput}\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ContactList from './contactList/ContactList';\r\nimport ContactForm from './contatctForm/ContactForm';\r\nimport Filter from './filter/Filter';\r\nimport s from '../Components/App.module.css';\r\n\r\nconst initialState = {\r\n  contacts: [],\r\n\r\n  filter: '',\r\n};\r\n\r\nconst App = () => {\r\n  const [state, setState] = useState(initialState);\r\n\r\n  // const contacts = JSON.parse(localStorage.getItem('contacts'));\r\n  console.log('1', state);\r\n  useEffect(() => {\r\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\r\n    if (contacts) {\r\n      setState(prevState => ({ ...prevState, contacts }));\r\n    }\r\n    // console.log(state);\r\n  }, []);\r\n  console.log(state);\r\n  // componentDidMount() {\r\n  //   const contacts = JSON.parse(localStorage.getItem('contacts'));\r\n  //   if (contacts) {\r\n  //     setState({ contacts });\r\n  //   }\r\n  // }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(state.contacts));\r\n  }, [state.contacts]);\r\n\r\n  // componentDidUpdate(prevState) {\r\n  //   if (prevState.contacts !== state.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  const addNewContact = newContact => {\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      contacts: [...prevState.contacts, { ...newContact, id: uuidv4() }],\r\n    }));\r\n  };\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setState(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const removeContact = e => {\r\n    const id = e.target.id;\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\r\n      // filter: '',\r\n    }));\r\n  };\r\n\r\n  const findContact = e => {\r\n    return state.contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(state.filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  const isThereContact = name =>\r\n    state.contacts.some(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <h1 className={s.title}>Phonebook</h1>\r\n\r\n      <ContactForm\r\n        //   handleChange={handleChange}\r\n        addNewContact={addNewContact}\r\n        isThereContact={isThereContact}\r\n      />\r\n\r\n      <h2 className={s.title}>Contacts</h2>\r\n\r\n      <Filter filter={state.filter} onChange={handleChange} />\r\n\r\n      <ContactList findContact={findContact()} removeContact={removeContact} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n// class App extends Component {\r\n//   state = {\r\n//     contacts: [],\r\n\r\n//     filter: '',\r\n//   };\r\n\r\n//   addNewContact = newContact => {\r\n//     setState(prevState => ({\r\n//       contacts: [...prevState.contacts, { ...newContact, id: uuidv4() }],\r\n//     }));\r\n//   };\r\n\r\n//   handleChange = e => {\r\n//     const { name, value } = e.target;\r\n//     setState({ [name]: value });\r\n//   };\r\n\r\n//   removeContact = e => {\r\n//     const id = e.target.id;\r\n//     setState(prevState => ({\r\n//       contacts: prevState.contacts.filter(contact => contact.id !== id),\r\n//       // filter: '',\r\n//     }));\r\n//   };\r\n\r\n//   findContact = e => {\r\n//     return state.contacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(state.filter.toLowerCase()),\r\n//     );\r\n//   };\r\n\r\n//   isThereContact = name =>\r\n//     state.contacts.some(\r\n//       contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n//     );\r\n\r\n//   componentDidMount() {\r\n//     const contacts = JSON.parse(localStorage.getItem('contacts'));\r\n//     if (contacts) {\r\n//       setState({ contacts });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevState) {\r\n//     if (prevState.contacts !== state.contacts) {\r\n//       localStorage.setItem('contacts', JSON.stringify(state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <h1 className={s.title}>Phonebook</h1>\r\n\r\n//         <ContactForm\r\n//           //   handleChange={handleChange}\r\n//           addNewContact={addNewContact}\r\n//           isThereContact={isThereContact}\r\n//         />\r\n\r\n//         <h2 className={s.title}>Contacts</h2>\r\n\r\n//         <Filter filter={state.filter} onChange={handleChange} />\r\n\r\n//         <ContactList\r\n//           findContact={findContact()}\r\n//           removeContact={removeContact}\r\n//         />\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}